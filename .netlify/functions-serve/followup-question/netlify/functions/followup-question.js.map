{
  "version": 3,
  "sources": ["../../home/project/netlify/functions/followup-question.js"],
  "sourceRoot": "/tmp/tmp-37-OKN83EVefaDf",
  "sourcesContent": ["const corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n};\n\nexports.handler = async (event, context) => {\n  console.log('Function called with method:', event.httpMethod);\n  console.log('Function called with body:', event.body);\n\n  // Handle CORS preflight requests\n  if (event.httpMethod === \"OPTIONS\") {\n    return {\n      statusCode: 200,\n      headers: corsHeaders,\n      body: \"\",\n    };\n  }\n\n  // Only allow POST requests\n  if (event.httpMethod !== \"POST\") {\n    return {\n      statusCode: 405,\n      headers: corsHeaders,\n      body: JSON.stringify({ error: \"Method not allowed\" }),\n    };\n  }\n\n  try {\n    const { moduleName, userProgress } = JSON.parse(event.body || '{}');\n\n    if (!moduleName) {\n      return {\n        statusCode: 400,\n        headers: corsHeaders,\n        body: JSON.stringify({ error: \"Module name is required\" }),\n      };\n    }\n\n    // Simulate AI-generated follow-up questions based on the module\n    const followupQuestions = generateFollowupQuestions(moduleName, userProgress);\n\n    return {\n      statusCode: 200,\n      headers: {\n        ...corsHeaders,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        success: true,\n        questions: followupQuestions,\n        moduleName: moduleName,\n        timestamp: new Date().toISOString(),\n      }),\n    };\n  } catch (error) {\n    console.error(\"Error generating follow-up questions:\", error);\n    \n    return {\n      statusCode: 500,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        error: \"Failed to generate follow-up questions\",\n        message: error.message,\n      }),\n    };\n  }\n};\n\nfunction generateFollowupQuestions(moduleName, userProgress) {\n  const questionSets = {\n    \"Introduction to AI\": [\n      {\n        question: \"How do you think AI will impact your specific industry or field of interest?\",\n        type: \"reflection\",\n        difficulty: \"beginner\"\n      },\n      {\n        question: \"Can you identify three AI applications you use in your daily life without realizing it?\",\n        type: \"application\",\n        difficulty: \"beginner\"\n      },\n      {\n        question: \"What ethical considerations should we keep in mind when developing AI systems?\",\n        type: \"critical-thinking\",\n        difficulty: \"intermediate\"\n      },\n      {\n        question: \"How would you explain the difference between narrow AI and general AI to a friend?\",\n        type: \"explanation\",\n        difficulty: \"beginner\"\n      },\n      {\n        question: \"What are some potential risks and benefits of AI automation in the workplace?\",\n        type: \"analysis\",\n        difficulty: \"intermediate\"\n      }\n    ],\n    \"Machine Learning Basics\": [\n      {\n        question: \"How would you decide whether to use supervised or unsupervised learning for a new project?\",\n        type: \"decision-making\",\n        difficulty: \"intermediate\"\n      },\n      {\n        question: \"Can you think of a real-world problem that could be solved with machine learning?\",\n        type: \"application\",\n        difficulty: \"beginner\"\n      },\n      {\n        question: \"What steps would you take to prepare data for a machine learning model?\",\n        type: \"process\",\n        difficulty: \"intermediate\"\n      }\n    ],\n    \"Deep Learning\": [\n      {\n        question: \"How do neural networks mimic the human brain, and where do they differ?\",\n        type: \"comparison\",\n        difficulty: \"advanced\"\n      },\n      {\n        question: \"What factors would you consider when choosing the architecture for a neural network?\",\n        type: \"design\",\n        difficulty: \"advanced\"\n      }\n    ]\n  };\n\n  // Get questions for the specific module, or default questions\n  const moduleQuestions = questionSets[moduleName] || questionSets[\"Introduction to AI\"];\n  \n  // Randomly select 2-3 questions\n  const shuffled = moduleQuestions.sort(() => 0.5 - Math.random());\n  const selectedQuestions = shuffled.slice(0, Math.floor(Math.random() * 2) + 2);\n\n  return selectedQuestions.map((q, index) => ({\n    id: `q_${Date.now()}_${index}`,\n    ...q,\n    suggested_time: \"5-10 minutes\"\n  }));\n}"],
  "mappings": "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",
  "names": []
}
